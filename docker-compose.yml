version: "3.8"
services:
  db:
    container_name: db
    image: postgres:15.0-alpine
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    environment:
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - ./pgdata:/var/lib/postgresql/data
    ports:
      - 127.0.0.1:${DB_PORT}:5432
    networks:
      - panda
    logging:
      driver: "json-file"
      options:
        max-size: "10M"
        max-file: "10"

  backend:
    container_name: backend
    build:
      context: backend
      dockerfile: Dockerfile
    command: bash -c "npm install && npm run start:dev"
    depends_on:
      - db
    restart: unless-stopped
    volumes:
      - ./backend/:/app/
    ports:
      - 127.0.0.1:${BACKEND_PORT}:3006
    environment:
      - BACKEND_PORT=${BACKEND_PORT}
      - FRONTEND_PORT=${FRONTEND_PORT}
      - TYPEORM_DB_CONNECTION_TYPE=${TYPEORM_DB_CONNECTION_TYPE}
      - TYPEORM_DB_USERNAME=${DB_USERNAME}
      - TYPEORM_DB_PASSWORD=${DB_PASSWORD}
      - TYPEORM_DB_DATABASE=${DB_NAME}
      - TYPEORM_DB_PORT=${DB_PORT}
      - TYPEORM_DB_HOST=${TYPEORM_DB_HOST}
    networks:
      - panda
    logging:
      driver: "json-file"
      options:
        max-size: "10M"
        max-file: "10"
      
  frontend:
    container_name: frontend
    build:
      context: frontend
      dockerfile: Dockerfile
    command: bash -c "npm install && npm run webpack-config-dev"
    # Используем bash, чтобы выполнить две команды последовательно.
    # Сразу через "&&" выполняется только первая. Обе команды нам нужны,
    # т.к. у нас может не быть node_modules (например, если мы только забрали проект с git`а),
    # а без модулей запустить проект не получится.
    # Если же устанавливать зависимости в Dockerfile, то это неудобно для разработки, т.к.
    # они потом не "выбросятся" наружу, и можно разрабатывать для одних node_modules, а по-факту
    # внутри контейнера они будут другими. Если это в какой-то момент станет критичным (будут ошибки),
    # то поиск причины возникновения такой ошибки может занять очень много времени, поэтому делаем так.
    # После того как модули установлены - можно оставить только команду для запуска,
    # например "npm run webpack-config-dev".
    # Эти docker-compose и Dockerfile для dev`а, который использовался при разработке - удобен именно для неё.
    # Для прода нужно сначала скопировать package.json + package-lock.json внутрь,
    # вызвать "npm install", а затем скопировать исходники внутрь.
    # Но это будут уже другие Dockerfile и docker-compose, а так как это
    # проект исключительно про frontend, который в проде просто билдится и кладётся
    # в определённую папку на сервере nginx, то в их написании не вижу смысла, т.к.
    # они просто не будут использоваться.
    restart: unless-stopped
    volumes:
      - ./frontend/:/app/
    ports:
      - 127.0.0.1:${FRONTEND_PORT}:3008
    environment:
      - BACKEND_PORT=${BACKEND_PORT}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
    networks:
      - panda
    depends_on:
      - backend
    logging:
      driver: "json-file"
      options:
        max-size: "10M"
        max-file: "10"
      
networks:
  panda:
    driver: bridge
    ipam:
      config:
        - subnet: 172.22.0.0/16
